#include <glm/glm.hpp>
#include <glm/gtc/constants.hpp>
#include <vector>
#include <iostream>
#include <fstream>
#include <limits>
#include <cmath>
#include <memory>

// Define a simple structure for a ray
struct Ray {
	glm::vec3 origin;
	glm::vec3 direction;

	Ray(const glm::vec3& o, const glm::vec3& d) : origin(o), direction(glm::normalize(d)) {}
};

// Base class for any object in the scene
class SceneObject {
public:
	glm::vec3 color;
	float specularStrength;
	float shininess;

	SceneObject(const glm::vec3& col, float specStrength, float shine) : color(col), specularStrength(specStrength), shininess(shine) {}
	virtual bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const = 0;
};

// Sphere object
class Sphere : public SceneObject {
private:
	glm::vec3 center;
	float radius;

public:
	Sphere(const glm::vec3& c, float r, const glm::vec3& col, float specStrength, float shine) : SceneObject(col, specStrength, shine), center(c), radius(r) {}

	bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const override {
		glm::vec3 oc = ray.origin - center;
		float a = glm::dot(ray.direction, ray.direction);
		float b = 2.0f * glm::dot(oc, ray.direction);
		float c = glm::dot(oc, oc) - radius * radius;
		float discriminant = b * b - 4 * a * c;
		if (discriminant > 0) {
			float dist = (-b - sqrt(discriminant)) / (2.0f * a);
			if (dist > 0 && dist < distance) {
				distance = dist;
				normal = glm::normalize(ray.origin + ray.direction * distance - center);
				return true;
			}
		}
		return false;
	}
};

// Function to trace a ray and determine its color
glm::vec3 trace(const Ray& ray, const std::vector<std::unique_ptr<SceneObject>>& objects) {
	float closestDistance = std::numeric_limits<float>::max();
	glm::vec3 closestNormal;
	glm::vec3 pixelColor(0);
	SceneObject* closestObject = nullptr;

	for (const auto& object : objects) {
		glm::vec3 normal;
		float distance = std::numeric_limits<float>::max();
		if (object->intersect(ray, distance, normal)) {
			if (distance < closestDistance) {
				closestDistance = distance;
				closestNormal = normal;
				closestObject = object.get();
			}
		}
	}

	if (closestObject) {
		// Lighting calculation
		glm::vec3 ambientColor(0.4f); // Increased ambient light for brightness
		glm::vec3 lightColor(1.0f); // White light
		glm::vec3 lightPos(5, 5, -10); // Position of the light
		glm::vec3 lightDir = glm::normalize(lightPos - (ray.origin + closestNormal * closestDistance));

		// Diffuse component
		float diff = glm::max(glm::dot(closestNormal, lightDir), 0.0f);
		glm::vec3 diffuse = diff * lightColor;

		// Specular component
		glm::vec3 viewDir = glm::normalize(-ray.direction);
		glm::vec3 reflectDir = glm::reflect(-lightDir, closestNormal);
		float spec = glm::pow(glm::max(glm::dot(viewDir, reflectDir), 0.0f), closestObject->shininess);
		glm::vec3 specular = closestObject->specularStrength * spec * lightColor;

		// Combine components
		pixelColor = (ambientColor + diffuse + specular) * closestObject->color;
	}

	return pixelColor;
}

// Main rendering function
void render(int width, int height) {
	std::vector<std::unique_ptr<SceneObject>> objects;

	// Create multiple test spheres with different colors and positions
	// The parameters are color, specular strength, and shininess
	objects.push_back(std::make_unique<Sphere>(glm::vec3(-2.5, 0.0, -5), 1, glm::vec3(1.0, 0.0, 0.0), 0.5, 32)); // Red, medium shiny
	objects.push_back(std::make_unique<Sphere>(glm::vec3(0.0, 0.0, -5), 1, glm::vec3(0.0, 1.0, 0.0), 0.3, 16)); // Green, less shiny
	objects.push_back(std::make_unique<Sphere>(glm::vec3(2.5, 0.0, -5), 1, glm::vec3(0.0, 0.0, 1.0), 1.0, 64)); // Blue, very shiny

	std::ofstream out("output.ppm");
	out << "P3\n" << width << ' ' << height << "\n255\n";

	for (int j = 0; j < height; ++j) {
		for (int i = 0; i < width; ++i) {
			// Simple camera setup
			float x = (2 * (i + 0.5f) / (float)width - 1) * width / (float)height;
			float y = (1 - 2 * (j + 0.5f) / (float)height);
			Ray ray(glm::vec3(0), glm::vec3(x, y, -1));
			glm::vec3 color = trace(ray, objects);
			out << (int)(color.r * 255) << ' '
				<< (int)(color.g * 255) << ' '
				<< (int)(color.b * 255) << '\n';
		}
	}

	out.close();
}

int main() {
	const int imageWidth = 800;
	const int imageHeight = 600;

	render(imageWidth, imageHeight);

	std::cout << "Done!" << std::endl;
	return 0;
}
