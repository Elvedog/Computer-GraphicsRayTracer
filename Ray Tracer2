#include <glm/glm.hpp>
#include <glm/gtc/constants.hpp>
#include <vector>
#include <iostream>
#include <fstream>
#include <limits>
#include <cmath>
#include <memory>
#include <random>

// Define a simple structure for a ray
struct Ray {
	glm::vec3 origin;
	glm::vec3 direction;

	Ray(const glm::vec3& o, const glm::vec3& d) : origin(o), direction(glm::normalize(d)) {}
};

// Base class for any object in the scene
class SceneObject {
public:
	glm::vec3 color;
	float specularStrength;
	float shininess;
	float transparency;
	float refractiveIndex;

	SceneObject(const glm::vec3& col, float specStrength, float shine, float transp, float refractIdx)
		: color(col), specularStrength(specStrength), shininess(shine), transparency(transp), refractiveIndex(refractIdx) {}
	virtual bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const = 0;
};

// Sphere object
class Sphere : public SceneObject {
private:
	glm::vec3 center;
	float radius;

public:
	Sphere(const glm::vec3& c, float r, const glm::vec3& col, float specStrength, float shine, float transp, float refractIdx)
		: SceneObject(col, specStrength, shine, transp, refractIdx), center(c), radius(r) {}

	bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const override {
		glm::vec3 oc = ray.origin - center;
		float a = glm::dot(ray.direction, ray.direction);
		float b = 2.0f * glm::dot(oc, ray.direction);
		float c = glm::dot(oc, oc) - radius * radius;
		float discriminant = b * b - 4 * a * c;
		if (discriminant > 0) {
			float dist = (-b - sqrt(discriminant)) / (2.0f * a);
			if (dist > 0 && dist < distance) {
				distance = dist;
				normal = glm::normalize(ray.origin + ray.direction * distance - center);
				return true;
			}
		}
		return false;
	}
};

// Room object (6 walls)
class Room : public SceneObject {
private:
	glm::vec3 minCorner;
	glm::vec3 maxCorner;

public:
	Room(const glm::vec3& min, const glm::vec3& max, const glm::vec3& col)
		: SceneObject(col, 0.0f, 0.0f, 0.0f, 0.0f), minCorner(min), maxCorner(max) {}

	bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const override {
		glm::vec3 tmin = (minCorner - ray.origin) / ray.direction;
		glm::vec3 tmax = (maxCorner - ray.origin) / ray.direction;
		glm::vec3 t1 = glm::min(tmin, tmax);
		glm::vec3 t2 = glm::max(tmin, tmax);
		float tNear = glm::max(glm::max(t1.x, t1.y), t1.z);
		float tFar = glm::min(glm::min(t2.x, t2.y), t2.z);

		if (tNear > tFar || tFar < 0.0f) {
			return false;
		}

		if (tNear > 0 && tNear < distance) {
			distance = tNear;

			if (tNear == t1.x) {
				normal = glm::vec3(-1.0f, 0.0f, 0.0f); // Left wall
			}
			else if (tNear == t1.y) {
				normal = glm::vec3(0.0f, -1.0f, 0.0f); // Bottom wall
			}
			else if (tNear == t1.z) {
				normal = glm::vec3(0.0f, 0.0f, -1.0f); // Front wall
			}
			else if (tNear == t2.x) {
				normal = glm::vec3(1.0f, 0.0f, 0.0f); // Right wall
			}
			else if (tNear == t2.y) {
				normal = glm::vec3(0.0f, 1.0f, 0.0f); // Top wall
			}
			else {
				normal = glm::vec3(0.0f, 0.0f, 1.0f); // Back wall
			}

			return true;
		}

		return false;
	}
};

// Point light source
class PointLight {
public:
	glm::vec3 position;
	glm::vec3 color;
	float intensity;

	PointLight(const glm::vec3& pos, const glm::vec3& col, float inten)
		: position(pos), color(col), intensity(inten) {}
};

// Function to calculate lighting from point light source
glm::vec3 calculateLighting(const glm::vec3& point, const glm::vec3& normal, const glm::vec3& viewDir, const PointLight& light) {
	glm::vec3 lightDir = glm::normalize(light.position - point);

	// Diffuse component
	float diff = glm::max(glm::dot(normal, lightDir), 0.0f);
	glm::vec3 diffuse = diff * light.intensity * light.color;

	// Specular component
	glm::vec3 reflectDir = glm::reflect(-lightDir, normal);
	float spec = glm::pow(glm::max(glm::dot(viewDir, reflectDir), 0.0f), 32.0f); // Adjust shininess as needed
	glm::vec3 specular = spec * light.intensity * light.color;

	return diffuse + specular;
}

// Update the trace function
glm::vec3 trace(const Ray& ray, const std::vector<std::unique_ptr<SceneObject>>& objects, const std::vector<PointLight>& lights, int depth, std::mt19937& rng) {
	if (depth <= 0) {
		return glm::vec3(0);
	}

	float closestDistance = std::numeric_limits<float>::max();
	glm::vec3 closestNormal;
	glm::vec3 pixelColor(0);
	SceneObject* closestObject = nullptr;

	for (const auto& object : objects) {
		glm::vec3 normal;
		float distance = std::numeric_limits<float>::max();
		if (object->intersect(ray, distance, normal)) {
			if (distance < closestDistance) {
				closestDistance = distance;
				closestNormal = normal;
				closestObject = object.get();
			}
		}
	}

	if (closestObject) {
		// Calculate lighting from all point light sources
		for (const auto& light : lights) {
			glm::vec3 point = ray.origin + ray.direction * closestDistance;
			glm::vec3 lighting = calculateLighting(point, closestNormal, -ray.direction, light);
			pixelColor += lighting * closestObject->color;
		}

		// Reflection calculation
		if (closestObject->specularStrength > 0) {
			glm::vec3 reflectDir = glm::reflect(-ray.direction, closestNormal);
			Ray reflectedRay(ray.origin + ray.direction * closestDistance + 0.001f * reflectDir, reflectDir);
			glm::vec3 reflectedColor = trace(reflectedRay, objects, lights, depth - 1, rng);
			pixelColor += closestObject->specularStrength * reflectedColor;
		}
	}
	else {
		// Background color (outer space with stars)
		std::uniform_real_distribution<float> dist(0.0f, 1.0f);
		float r = dist(rng);
		float g = dist(rng);
		float b = dist(rng);
		pixelColor = glm::vec3(r, g, b);
	}

	return pixelColor;
}

// Create a solar system scene
void createSolarSystem(std::vector<std::unique_ptr<SceneObject>>& objects) {
	// Create a room with reflective walls
	objects.push_back(std::make_unique<Room>(glm::vec3(-10, -10, -10), glm::vec3(10, 10, 10), glm::vec3(0.2, 0.2, 0.2)));

	// Create the Sun (larger than planets)
	objects.push_back(std::make_unique<Sphere>(glm::vec3(0.0, -1.0, -5), 2.0, glm::vec3(1.0, 1.0, 0.0), 0.7, 128, 0.0, 0.0));

	// Create Earth (bigger)
	objects.push_back(std::make_unique<Sphere>(glm::vec3(-4.0, -1.0, -5), 0.6, glm::vec3(0.0, 0.0, 1.0), 0.5, 128, 0.0, 0.0));

	// Create Mars (bigger)
	objects.push_back(std::make_unique<Sphere>(glm::vec3(-7.0, -1.0, -5), 0.5, glm::vec3(1.0, 0.0, 0.0), 0.5, 128, 0.0, 0.0));

	// Create Venus (bigger)
	objects.push_back(std::make_unique<Sphere>(glm::vec3(4.0, -1.0, -5), 0.7, glm::vec3(1.0, 0.5, 0.0), 0.5, 128, 0.0, 0.0));
}
// Main rendering function
void renderSolarSystem(int width, int height) {
	std::vector<std::unique_ptr<SceneObject>> objects;
	std::vector<PointLight> lights;

	createSolarSystem(objects);

	// Define a point light source
	lights.push_back(PointLight(glm::vec3(0, 5, -5), glm::vec3(1, 1, 1), 1.0));

	std::ofstream out("solar_system.ppm");
	out << "P3\n" << width << ' ' << height << "\n255\n";

	std::random_device rd;
	std::mt19937 rng(rd());

	for (int j = 0; j < height; ++j) {
		for (int i = 0; i < width; ++i) {
			// Simple camera setup
			float x = (2 * (i + 0.5f) / (float)width - 1) * width / (float)height;
			float y = (1 - 2 * (j + 0.5f) / (float)height);
			Ray ray(glm::vec3(0), glm::vec3(x, y, -1));
			glm::vec3 color = trace(ray, objects, lights, 5, rng);
			out << (int)(color.r * 255) << ' ' << (int)(color.g * 255) << ' ' << (int)(color.b * 255) << '\n';
		}
	}

	out.close();
}

int main() {
	const int imageWidth = 800;
	const int imageHeight = 600;

	renderSolarSystem(imageWidth, imageHeight);

	std::cout << "Done!" << std::endl;
	return 0;
}
